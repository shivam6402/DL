import pandas as pd

df = pd.read_csv("BostonHousing.csv")


df.head(5)


import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn. preprocessing import StandardScaler
from sklearn import metrics
import pandas as pd
import numpy as np
import matplotlib. pyplot as plt
import seaborn as sns
%matplotlib inline
from tqdm.notebook import tqdm


boston = tf.keras.datasets.boston_housing


boston_data = boston.load_data()


(x_train, y_train), (x_test, y_test) = tf.keras.datasets.boston_housing.load_data(test_split=0.2, seed=42)


x_train.shape, y_train.shape, x_test.shape, y_test.shape



scaler = StandardScaler()


x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)
y_train_scaled = scaler.fit_transform(y_train.reshape(-1, 1))
y_test_scaled = scaler.transform(y_test.reshape(-1, 1))




model = tf.keras.models.Sequential ([
tf.keras.layers.Input(shape=(13), name='input-layer'),
tf.keras.layers.Dense(100, name='hidden-layer-2'),
tf.keras.layers.BatchNormalization(name='hidden-layer-3'),
tf.keras.layers.Dense(50, name='hidden-layer-4'),
tf.keras.layers.Dense(1, name='output-layer')
])


model. summary()



model.compile(optimizer='adam', loss='mse',metrics=['mae'])



history = model.fit(x_train, y_train, batch_size=32, epochs=20,validation_data=(x_test, y_test))



pd.DataFrame(history.history).plot(figsize=(6,4))
plt.title("Metrics graph")
plt.show()


y_pred = model.predict(x_test)


sns.regplot(x=y_test, y=y_pred)
plt.title("Regression LIne for Predicted values")
plt.show()

