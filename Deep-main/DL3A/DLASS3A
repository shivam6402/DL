Dataset Link - https://www.kaggle.com/datasets/rashikrahmanpritom/plant-disease-recognition-dataset/code


import numpy as np
import pickle
from keras.models import Sequential
from keras.layers import BatchNormalization, Conv2D, MaxPooling2D, Flatten, Dropout, Dense
from keras import backend as K
from keras.optimizers import Adam
from keras.preprocessing.image import ImageDataGenerator, img_to_array
import tensorflow as tf




import os

def total_files(folder_path):
    num_files = len([f for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))])
    return num_files
train_healthy = "Train/Train/Healthy"
train_powdery = "Train/Train/Powdery"
train_rust = "Train/Train/Rust"

test_healthy = "Test/Test/Healthy"
test_powdery = "Test/Test/Powdery"
test_rust = "Test/Test/Rust"

valid_healthy = "Validation/Validation/Healthy"
valid_powdery = "Validation/Validation/Powdery"
valid_rust = "Validation/Validation/Rust"





print("Number of healthy leaf images in training set", total_files(train_healthy))
print("Number of powder leaf images in training set", total_files(train_powdery))
print("Number of rusty leaf images in training set", total_files(train_rust))

print("========================================================")

print("Number of healthy leaf images in test set", total_files(test_healthy))
print("Number of powder leaf images in test set", total_files(test_powdery))
print("Number of rusty leaf images in test set", total_files(test_rust))

print("========================================================")

print("Number of healthy leaf images in validation set", total_files(valid_healthy))
print("Number of powder leaf images in validation set", total_files(valid_powdery))
print("Number of rusty leaf images in validation set", total_files(valid_rust))




from PIL import Image
import IPython.display as display

image_path = 'Train/Train/Healthy/8ce77048e12f3dd4.jpg'

with open(image_path, 'rb') as f:
    display.display(display.Image(data=f.read(), width=500))
    
    
    
    
from PIL import Image
import IPython.display as display

image_path = 'Train/Train/Rust/80f09587dfc7988e.jpg'

with open(image_path, 'rb') as f:
    display.display(display.Image(data=f.read(), width=500))
    
    
    
from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)



train_generator = train_datagen.flow_from_directory('Train/Train',
                                                    target_size=(225, 225),
                                                    batch_size=32,
                                                    class_mode='categorical')

validation_generator = test_datagen.flow_from_directory('Validation/Validation',
                                                        target_size=(225, 225),
                                                        batch_size=32,
                                                        class_mode='categorical')
                                                        
                                                        
                                                        
                                                        
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=(225, 225, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(3, activation='softmax'))




model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])



history = model.fit(train_generator,
                    batch_size=16,
                    epochs=5,
                    validation_data=validation_generator,
                    validation_batch_size=16
                    )
                    
                    
                    
from matplotlib import pyplot as plt
from matplotlib.pyplot import figure
import seaborn as sns
sns.set_theme()
sns.set_context("poster")
figure(figsize=(25, 25), dpi=100)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()




from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np
def preprocess_image(image_path, target_size=(225, 225)):
    img = load_img(image_path, target_size=target_size)
    x = img_to_array(img)
    x = x.astype('float32') / 255.
    x = np.expand_dims(x, axis=0)
    return x
x = preprocess_image('Train/Train/Rust/80f09587dfc7988e.jpg')
x


predictions = model.predict(x)
predictions[0]



labels = train_generator.class_indices
labels = {v: k for k, v in labels.items()}
labels



predicted_label = labels[np.argmax(predictions)]
print(predicted_label)



import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk
import os


# Placeholder function for the ML model prediction
def predict_image(image_path):
    # Here you would load your model and make a prediction
    # For demonstration, this is a dummy function that prints the image path
    print(f"Predicting for the image: {image_path}")
    predictions = model.predict(preprocess_image(image_path))
    
    labels = train_generator.class_indices
    labels = {v: k for k, v in labels.items()}
    
    predicted_label = labels[np.argmax(predictions)]
    print(predicted_label)
    test = predicted_label
    
    # Display the name on the label
    label.config(text=test)

# Load an image and display it in the GUI
def load_image():
    file_path = filedialog.askopenfilename()
    if file_path:  # Ensure a file path was selected
        img = Image.open(file_path)
        img.thumbnail((250, 250))  # Resize image to fit the display
        img = ImageTk.PhotoImage(img)
        image_label.config(image=img)
        image_label.image = img  # Keep a reference so it's not garbage collected
        image_label.file_path = file_path  # Save the file path for prediction

# GUI setup
root = tk.Tk()
root.title("Image Classifier")

# Create and pack the image label
image_label = tk.Label(root)
image_label.pack()

# Create and pack buttons
add_image_button = tk.Button(root, text="Add Image", command=load_image)
add_image_button.pack()

predict_button = tk.Button(root, text="Predict", command=lambda: predict_image(image_label.file_path))
predict_button.pack()

# Create a display label
label = tk.Label(root, text="CLASS", font=("Arial", 24))
label.pack()


root.mainloop()











